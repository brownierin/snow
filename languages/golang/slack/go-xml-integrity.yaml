rules:
- id: potential-xml-integrity-issue-1
  pattern-either:
  - pattern: |
      xml.Decoder(...)
  - pattern: |
      xml.Encoder(...)
  fix: If possible, avoid using the golang encoding/xml parser, particularly if using it for a SAML implementation. The Go security team has advised at this time, there is no fix available to adequately patch these vulnerabilities.  Round-trip stability is not a supported security property of encoding/xml.  If the encoding/xml parser is necessary to application functionality, the github.com/mattermost/xml-roundtrip-validator module can detect unstable constructs in an XML document, including unstable element namespace prefixes. Invoking the validator on all untrusted markup and failing early if it returns an error can prevent these types of issue from being exploited in an otherwise affected application.
  message: |-
    If an application processes XML and, while processing it, parses markup that is the output of at least one preceding round of parsing and serialization, there is no guarantee that the output of the parsing matches the output from the preceding round. Passing XML through Go’s decoder and encoder doesn’t preserve its semantics.  Because of these vulnerabilities, Go-based SAML implementations are in many cases open to tampering by an attacker: by injecting malicious markup to a correctly signed SAML message, it’s possible to make it still appear correctly signed, but change its semantics to convey a different identity than the original document.
  metadata:
    cve: 'CVE-2020-29509: XML attribute instability in Go’s encoding/xml, CVE-2020-29510: XML directive instability in Go’s encoding/xml, CVE-2020-29511: XML element instability in Go’s encoding/xml'
  languages: [go]
  severity: WARNING
