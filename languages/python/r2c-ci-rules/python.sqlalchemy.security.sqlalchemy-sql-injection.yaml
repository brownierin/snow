rules:
- id: python.sqlalchemy.security.sqlalchemy-sql-injection
  message: |
    Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides "bindparams". Use bindParams to securely bind user-input to SQL statements.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
  patterns:
  - pattern-either:
      - pattern: |
          def $FUNC(...,$VAR,...):
            ...
            $SESSION.query(...).$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
      - pattern: |
          def $FUNC(...,$VAR,...):
            ...
            $SESSION.query.join(...).$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
      - pattern: |
          def $FUNC(...,$VAR,...):
            ...
            $SESSION.query.$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
      - pattern: |
          def $FUNC(...,$VAR,...):
            ...
            query.$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
  - metavariable-regex:
      metavariable: $SQLFUNC
      regex: (group_by|order_by|distinct|having|filter)
  - metavariable-regex:
      metavariable: $FORMATFUNC
      regex: (?!bindparams)
  severity: WARNING
  languages:
  - python