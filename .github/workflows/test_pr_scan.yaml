name: "Test for PR scan"

on:
  workflow_call:
    secrets:
      SNOW_ALERT_WEBHOOK: 
        description: Slack webhook URL for pushing results
        required: true
      CHECKPOINT_TOKEN:
        description: TSAuth token for uploading results to checkpoint
        required: true
      SNOW_AWS_ACCESS_KEY_ID:
        description: AWS access key for the snow account
        required: false
      SNOW_AWS_SECRET_ACCESS_KEY:
        description: AWS secret key for the snow account
        required: false
  workflow_dispatch:

jobs:
  scan-with-semgrep:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      working-directory: snow
      env: snow-test
      SNOW_ALERT_WEBHOOK: ${{ secrets.SNOW_ALERT_WEBHOOK }}
      CHECKPOINT_TOKEN: ${{ secrets.CHECKPOINT_TOKEN }}
      SNOW_AWS_ACCESS_KEY_ID: ${{ secrets.SNOW_AWS_ACCESS_KEY_ID }}
      SNOW_AWS_SECRET_ACCESS_KEY: ${{ secrets.SNOW_AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Clone snow code
        uses: actions/checkout@v2
        with:
          repository: 'tinyspeck/snow'
          path: snow
          fetch-depth: 0

      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          repository: tinyspeck/fake-repo
          path: snow/repo
          fetch-depth: 0
          github-token: ${{ github.token }} 

      - name: move repository code to correct dir
        run: |
          cd ${{ env.working-directory }}
          mkdir -p repositories/${{ github.event.repository.name }}
          mv repo/.[!.]* repositories/${{ github.event.repository.name }}

      - name: Install python3
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.9

      - name: install requirements
        run: |
          cd ${{ env.working-directory }}
          python3 -m pip install -r requirements.txt
          poetry install --no-dev
          poetry env list

      - name: Run semgrep
        id: run-semgrep
        run: |
          cd ${{ env.working-directory }}
          env=snow-test poetry run $(pwd)/run_semgrep.py -m pr -g ghc -r ${{ github.event.repository.name }}
          cat_results=$(cat results/results_blob.txt | python3 -c 'import json; import sys; print(json.dumps(sys.stdin.read()))')
          echo "RESULTS=${cat_results}" >> $GITHUB_ENV

      - name: Archive scan results
        uses: actions/upload-artifact@v2
        with:
            name: results_folder
            path: ${{ env.working-directory}}/results/*

      - name: Create a comment with scan results
        if: github.event.issue.pull_request
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ${{ env.RESULTS }}
            })
